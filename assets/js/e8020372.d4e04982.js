"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[28870],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>g});var a=t(296540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(t),m=i,g=d["".concat(s,".").concat(m)]||d[m]||y[m]||r;return t?a.createElement(g,l(l({ref:n},p),{},{components:t})):a.createElement(g,l({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[d]="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},560022:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>y,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=t(58168),i=(t(296540),t(15680));const r={title:"Querying Async Materialized View",language:"en"},l=void 0,o={unversionedId:"query/view-materialized-view/query-async-materialized-view",id:"query/view-materialized-view/query-async-materialized-view",title:"Querying Async Materialized View",description:"\x3c!--",source:"@site/docs/query/view-materialized-view/query-async-materialized-view.md",sourceDirName:"query/view-materialized-view",slug:"/query/view-materialized-view/query-async-materialized-view",permalink:"/docs/dev/query/view-materialized-view/query-async-materialized-view",draft:!1,tags:[],version:"current",frontMatter:{title:"Querying Async Materialized View",language:"en"},sidebar:"docs",previous:{title:"Asynchronous materialized view",permalink:"/docs/dev/query/view-materialized-view/async-materialized-view"},next:{title:"Doris Join Optimization Principle",permalink:"/docs/dev/query/join-optimization/doris-join-optimization"}},s={},u=[{value:"Overview",id:"overview",level:2},{value:"Direct Query of Materialized View",id:"direct-query-of-materialized-view",level:2},{value:"Transparent Rewriting Capability",id:"transparent-rewriting-capability",level:2},{value:"Join rewriting",id:"join-rewriting",level:3},{value:"Aggregate rewriting",id:"aggregate-rewriting",level:3},{value:"Query partial Transparent Rewriting (Coming soon)",id:"query-partial-transparent-rewriting-coming-soon",level:2},{value:"Union Rewriting (Coming soon)",id:"union-rewriting-coming-soon",level:2},{value:"Auxiliary Functions",id:"auxiliary-functions",level:2},{value:"Relevant Environment Variables",id:"relevant-environment-variables",level:2},{value:"Limitations",id:"limitations",level:2}],p={toc:u},d="wrapper";function y(e){let{components:n,...t}=e;return(0,i.yg)(d,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h2",{id:"overview"},"Overview"),(0,i.yg)("p",null,"Doris's asynchronous materialized views employ an algorithm based on the SPJG (SELECT-PROJECT-JOIN-GROUP-BY) pattern\nstructure information for transparent rewriting."),(0,i.yg)("p",null,"Doris can analyze the structural information of query SQL, automatically search for suitable materialized views,\nand attempt transparent rewriting, utilizing the optimal materialized view to express the query SQL."),(0,i.yg)("p",null,"By utilizing precomputed materialized view results,\nsignificant improvements in query performance and a reduction in computational costs can be achieved."),(0,i.yg)("p",null,"Using the three tables: lineitem, orders, and partsupp from TPC-H, let's describe the capability of directly querying\na materialized view and using the materialized view for transparent query rewriting."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS lineitem (\n    l_orderkey    integer not null,\n    l_partkey     integer not null,\n    l_suppkey     integer not null,\n    l_linenumber  integer not null,\n    l_quantity    decimalv3(15,2) not null,\n    l_extendedprice  decimalv3(15,2) not null,\n    l_discount    decimalv3(15,2) not null,\n    l_tax         decimalv3(15,2) not null,\n    l_returnflag  char(1) not null,\n    l_linestatus  char(1) not null,\n    l_shipdate    date not null,\n    l_commitdate  date not null,\n    l_receiptdate date not null,\n    l_shipinstruct char(25) not null,\n    l_shipmode     char(10) not null,\n    l_comment      varchar(44) not null\n    )\n    DUPLICATE KEY(l_orderkey, l_partkey, l_suppkey, l_linenumber)\n    PARTITION BY RANGE(l_shipdate)\n(FROM ('2023-10-17') TO ('2023-10-20') INTERVAL 1 DAY)\n    DISTRIBUTED BY HASH(l_orderkey) BUCKETS 3\n    PROPERTIES (\"replication_num\" = \"1\");\n\ninsert into lineitem values\n                         (1, 2, 3, 4, 5.5, 6.5, 7.5, 8.5, 'o', 'k', '2023-10-17', '2023-10-17', '2023-10-17', 'a', 'b', 'yyyyyyyyy'),\n                         (2, 4, 3, 4, 5.5, 6.5, 7.5, 8.5, 'o', 'k', '2023-10-18', '2023-10-18', '2023-10-18', 'a', 'b', 'yyyyyyyyy'),\n                         (3, 2, 4, 4, 5.5, 6.5, 7.5, 8.5, 'o', 'k', '2023-10-19', '2023-10-19', '2023-10-19', 'a', 'b', 'yyyyyyyyy');\n")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS orders  (\n    o_orderkey       integer not null,\n    o_custkey        integer not null,\n    o_orderstatus    char(1) not null,\n    o_totalprice     decimalv3(15,2) not null,\n    o_orderdate      date not null,\n    o_orderpriority  char(15) not null,\n    o_clerk          char(15) not null,\n    o_shippriority   integer not null,\n    o_comment        varchar(79) not null\n    )\n    DUPLICATE KEY(o_orderkey, o_custkey)\n    PARTITION BY RANGE(o_orderdate)(\n    FROM ('2023-10-17') TO ('2023-10-20') INTERVAL 1 DAY)\n    DISTRIBUTED BY HASH(o_orderkey) BUCKETS 3\n    PROPERTIES (\"replication_num\" = \"1\");\n\n    insert into orders values\n    (1, 1, 'o', 9.5, '2023-10-17', 'a', 'b', 1, 'yy'),\n    (1, 1, 'o', 10.5, '2023-10-18', 'a', 'b', 1, 'yy'),\n    (2, 1, 'o', 11.5, '2023-10-19', 'a', 'b', 1, 'yy'),\n    (3, 1, 'o', 12.5, '2023-10-19', 'a', 'b', 1, 'yy');\n")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"    CREATE TABLE IF NOT EXISTS partsupp (\n      ps_partkey     INTEGER NOT NULL,\n      ps_suppkey     INTEGER NOT NULL,\n      ps_availqty    INTEGER NOT NULL,\n      ps_supplycost  DECIMALV3(15,2)  NOT NULL,\n      ps_comment     VARCHAR(199) NOT NULL \n    )\n    DUPLICATE KEY(ps_partkey, ps_suppkey)\n    DISTRIBUTED BY HASH(ps_partkey) BUCKETS 3\n    PROPERTIES (\n      \"replication_num\" = \"1\"\n    );\n\n    insert into partsupp values\n    (2, 3, 9, 10.01, 'supply1'),\n    (4, 3, 10, 11.01, 'supply2'),\n    (2, 3, 10, 11.01, 'supply3');\n")),(0,i.yg)("h2",{id:"direct-query-of-materialized-view"},"Direct Query of Materialized View"),(0,i.yg)("p",null,"A materialized view can be considered as a table and can be queried just like a regular table."),(0,i.yg)("p",null,"The syntax for defining a materialized view, details can be found in\n",(0,i.yg)("a",{parentName:"p",href:"../../sql-manual/sql-reference/Data-Definition-Statements/Create/CREATE-ASYNC-MATERIALIZED-VIEW.md"},"CREATE-ASYNC-MATERIALIZED-VIEW")),(0,i.yg)("p",null,"Materialized view definition:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW mv1\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nPROPERTIES ('replication_num' = '1')\nAS\nSELECT t1.l_linenumber,\n       o_custkey,\n       o_orderdate\nFROM\n    (SELECT * FROM lineitem WHERE l_linenumber > 1) t1\nLEFT OUTER JOIN orders ON l_orderkey = o_orderkey;\n")),(0,i.yg)("p",null,"Query statement:\nDirect queries can be performed on the materialized view with additional filtering conditions and aggregations."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT l_linenumber,\n       o_custkey\nFROM mv1\nWHERE l_linenumber > 1 and o_orderdate = '2023-12-31';\n")),(0,i.yg)("h2",{id:"transparent-rewriting-capability"},"Transparent Rewriting Capability"),(0,i.yg)("h3",{id:"join-rewriting"},"Join rewriting"),(0,i.yg)("p",null,"Join rewriting refers to when the tables used in the query and the materialization are the same.\nIn this case, the optimizer will attempt transparent rewriting by either joining the input of the materialized\nview with the query or placing the join in the outer layer of the query's WHERE clause."),(0,i.yg)("p",null,"This pattern of rewriting is supported for multi-table joins and supported join types is as following:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"INNER JOIN"),(0,i.yg)("li",{parentName:"ul"},"LEFT OUTER JOIN"),(0,i.yg)("li",{parentName:"ul"},"RIGHT OUTER JOIN"),(0,i.yg)("li",{parentName:"ul"},"FULL OUTER JOIN"),(0,i.yg)("li",{parentName:"ul"},"LEFT SEMI JOIN"),(0,i.yg)("li",{parentName:"ul"},"RIGHT SEMI JOIN"),(0,i.yg)("li",{parentName:"ul"},"LEFT ANTI JOIN"),(0,i.yg)("li",{parentName:"ul"},"RIGHT ANTI JOIN")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Case 1:")),(0,i.yg)("p",null,"The following case can undergo transparent rewriting. The condition ",(0,i.yg)("inlineCode",{parentName:"p"},"l_linenumber > 1")," allows for pull-up,\nenabling transparent rewriting by expressing the query using the precomputed results of the materialized view."),(0,i.yg)("p",null,"Materialized view definition:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW mv2\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nPROPERTIES ('replication_num' = '1')\nAS\nSELECT t1.l_linenumber,\n       o_custkey,\n       o_orderdate\nFROM (SELECT * FROM lineitem WHERE l_linenumber > 1) t1\nLEFT OUTER JOIN orders\nON l_orderkey = o_orderkey;\n")),(0,i.yg)("p",null,"Query statement:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT l_linenumber,\n       o_custkey\nFROM lineitem\nLEFT OUTER JOIN orders\nON l_orderkey = o_orderkey\nWHERE l_linenumber > 1 and o_orderdate = '2023-10-18';\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Case 2:")),(0,i.yg)("p",null,"JOIN Derivation occurs when the join type between the query and the materialized view does not match.\nIn cases where the materialization can provide all the necessary data for the query, transparent rewriting can\nstill be achieved by compensating predicates outside the join through predicate push down."),(0,i.yg)("p",null,"For example:"),(0,i.yg)("p",null,"Materialized view definition:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW mv3\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nPROPERTIES ('replication_num' = '1')\nAS\nSELECT\n    l_shipdate, l_suppkey, o_orderdate\n    sum(o_totalprice) AS sum_total,\n    max(o_totalprice) AS max_total,\n    min(o_totalprice) AS min_total,\n    count(*) AS count_all,\n    count(distinct CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END) AS bitmap_union_basic\nFROM lineitem\nLEFT OUTER JOIN orders ON lineitem.l_orderkey = orders.o_orderkey AND l_shipdate = o_orderdate\nGROUP BY\nl_shipdate,\nl_suppkey,\no_orderdate;\n")),(0,i.yg)("p",null,"Query statement:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    l_shipdate, l_suppkey, o_orderdate,\n    sum(o_totalprice) AS sum_total,\n    max(o_totalprice) AS max_total,\n    min(o_totalprice) AS min_total,\n    count(*) AS count_all,\n    count(distinct CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END) AS bitmap_union_basic\nFROM lineitem\nINNER JOIN orders ON lineitem.l_orderkey = orders.o_orderkey AND l_shipdate = o_orderdate\nWHERE o_orderdate = '2023-10-18' AND l_suppkey = 3\nGROUP BY\nl_shipdate,\nl_suppkey,\no_orderdate;\n")),(0,i.yg)("h3",{id:"aggregate-rewriting"},"Aggregate rewriting"),(0,i.yg)("p",null,"In the definitions of both the query and the materialized view, the aggregated dimensions can either be consistent or inconsistent.\nFiltering of results can be achieved by using fields from the dimensions in the WHERE clause."),(0,i.yg)("p",null,"The dimensions used in the materialized view need to encompass those used in the query,\nand the metrics utilized in the query can be expressed using the metrics of the materialized view."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Case 1")),(0,i.yg)("p",null,"The following case can undergo transparent rewriting. The query and the materialized view use consistent dimensions\nfor aggregation, allowing the use of fields from the dimensions to filter results. The query will attempt to use the\nexpressions after SELECT in the materialized view."),(0,i.yg)("p",null,"Materialized view definition:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW mv4\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nPROPERTIES ('replication_num' = '1')\nAS\nSELECT\n    o_shippriority, o_comment,\n    count(distinct CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END) AS cnt_1,\n    count(distinct CASE WHEN O_SHIPPRIORITY > 2 AND o_orderkey IN (2) THEN o_custkey ELSE null END) AS cnt_2,\n    sum(o_totalprice),\n    max(o_totalprice),\n    min(o_totalprice),\n    count(*)\nFROM orders\nGROUP BY\no_shippriority,\no_comment;\n")),(0,i.yg)("p",null,"Query statement:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT \n    o_shippriority, o_comment,\n    count(distinct CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END) AS cnt_1,\n    count(distinct CASE WHEN O_SHIPPRIORITY > 2 AND o_orderkey IN (2) THEN o_custkey ELSE null END) AS cnt_2,\n    sum(o_totalprice),\n    max(o_totalprice),\n    min(o_totalprice),\n    count(*)\nFROM orders\nWHERE o_shippriority in (1, 2)\nGROUP BY\no_shippriority,\no_comment;\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Case 2")),(0,i.yg)("p",null,"The following query can be transparently rewritten: the query and the materialization use aggregated dimensions\nthat are inconsistent, but the dimensions used in the materialized view encompass those used in the query.\nThe query can filter results using fields from the dimensions."),(0,i.yg)("p",null,"The query will attempt to roll up using the functions after SELECT, such as the materialized view's\nbitmap_union will eventually roll up into bitmap_union_count, maintaining consistency with the semantics of\nthe count(distinct) in the query."),(0,i.yg)("p",null,"Materialized view definition:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW mv5\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nPROPERTIES ('replication_num' = '1')\nAS\nSELECT\n    l_shipdate, o_orderdate, l_partkey, l_suppkey,\n    sum(o_totalprice) AS sum_total,\n    max(o_totalprice) AS max_total,\n    min(o_totalprice) AS min_total,\n    count(*) AS count_all,\n    bitmap_union(to_bitmap(CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END)) AS bitmap_union_basic\nFROM lineitem\nLEFT OUTER JOIN orders ON lineitem.l_orderkey = orders.o_orderkey AND l_shipdate = o_orderdate\nGROUP BY\nl_shipdate,\no_orderdate,\nl_partkey,\nl_suppkey;\n")),(0,i.yg)("p",null,"Query statement:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    l_shipdate, l_suppkey,\n    sum(o_totalprice) AS sum_total,\n    max(o_totalprice) AS max_total,\n    min(o_totalprice) AS min_total,\n    count(*) AS count_all,\n    count(distinct CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END) AS bitmap_union_basic\nFROM lineitem\nLEFT OUTER JOIN orders ON lineitem.l_orderkey = orders.o_orderkey AND l_shipdate = o_orderdate\nWHERE o_orderdate = '2023-10-18' AND l_partkey = 3\nGROUP BY\nl_shipdate,\nl_suppkey;\n")),(0,i.yg)("p",null,"Temporary support for the aggregation roll-up functions is as follows:"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Functions in Queries"),(0,i.yg)("th",{parentName:"tr",align:null},"Functions in Materialized Views"),(0,i.yg)("th",{parentName:"tr",align:null},"Aggregation Functions After Rewriting"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"max"),(0,i.yg)("td",{parentName:"tr",align:null},"max"),(0,i.yg)("td",{parentName:"tr",align:null},"max")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"min"),(0,i.yg)("td",{parentName:"tr",align:null},"min"),(0,i.yg)("td",{parentName:"tr",align:null},"min")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"sum"),(0,i.yg)("td",{parentName:"tr",align:null},"sum"),(0,i.yg)("td",{parentName:"tr",align:null},"sum")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"count"),(0,i.yg)("td",{parentName:"tr",align:null},"count"),(0,i.yg)("td",{parentName:"tr",align:null},"sum")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"count(distinct )"),(0,i.yg)("td",{parentName:"tr",align:null},"bitmap_union"),(0,i.yg)("td",{parentName:"tr",align:null},"bitmap_union_count")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"bitmap_union"),(0,i.yg)("td",{parentName:"tr",align:null},"bitmap_union"),(0,i.yg)("td",{parentName:"tr",align:null},"bitmap_union")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"bitmap_union_count"),(0,i.yg)("td",{parentName:"tr",align:null},"bitmap_union"),(0,i.yg)("td",{parentName:"tr",align:null},"bitmap_union_count")))),(0,i.yg)("h2",{id:"query-partial-transparent-rewriting-coming-soon"},"Query partial Transparent Rewriting (Coming soon)"),(0,i.yg)("p",null,"When the number of tables in the materialized view is greater than the query, if the materialized view\nsatisfies the conditions for JOIN elimination for tables more than the query, transparent rewriting can also occur.\nFor example:"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Case 1")),(0,i.yg)("p",null,"Materialized view definition:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"}," CREATE MATERIALIZED VIEW mv6\n BUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\n DISTRIBUTED BY RANDOM BUCKETS 3\n PROPERTIES ('replication_num' = '1')\n AS\n SELECT\n     l_linenumber,\n     o_custkey,\n     ps_availqty\n FROM lineitem\n LEFT OUTER JOIN orders ON L_ORDERKEY = O_ORDERKEY\n LEFT OUTER JOIN partsupp ON l_partkey = ps_partkey\n AND l_suppkey = ps_suppkey;\n")),(0,i.yg)("p",null,"Query statement:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"}," SELECT\n     l_linenumber,\n     o_custkey,\n     ps_availqty\n FROM lineitem\n LEFT OUTER JOIN orders ON L_ORDERKEY = O_ORDERKEY;\n")),(0,i.yg)("h2",{id:"union-rewriting-coming-soon"},"Union Rewriting (Coming soon)"),(0,i.yg)("p",null,"When the materialized view is not sufficient to provide all the data for the query, it can use Union to return\ndata by combining the original table and the materialized view.\nFor example:"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Case 1")),(0,i.yg)("p",null,"Materialized view definition:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW mv7\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nPROPERTIES ('replication_num' = '1')\nAS\nSELECT\n    o_orderkey,\n    o_custkey,\n    o_orderstatus,\n    o_totalprice\nFROM orders\nWHERE o_orderkey > 10;\n")),(0,i.yg)("p",null,"Query statement:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    o_orderkey,\n    o_custkey,\n    o_orderstatus,\n    o_totalprice\nFROM orders\nWHERE o_orderkey > 5;\n")),(0,i.yg)("p",null,"Rewriting result:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM mv\nUNION ALL\nSELECT\n    o_orderkey,\n    o_custkey,\n    o_orderstatus,\n    o_totalprice\nFROM orders\nWHERE o_orderkey > 5 AND o_orderkey <= 10;\n")),(0,i.yg)("h2",{id:"auxiliary-functions"},"Auxiliary Functions"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Data Consistency Issues After Transparent Rewriting")),(0,i.yg)("p",null,"The unit of ",(0,i.yg)("inlineCode",{parentName:"p"},"grace_period")," is seconds, referring to the permissible time for inconsistency between the materialized\nview and the data in the underlying base tables."),(0,i.yg)("p",null,"For example, setting ",(0,i.yg)("inlineCode",{parentName:"p"},"grace_period")," to 0 means requiring the materialized view to be consistent with the base\ntable data before it can be used for transparent rewriting. As for external tables,\nsince changes in data cannot be perceived, the materialized view is used with them.\nRegardless of whether the data in the external table is up-to-date or not, this materialized view can be used for\ntransparent rewriting. If the external table is configured with an HMS metadata source,\nit becomes capable of perceiving data changes. Configuring the metadata source and enabling data change\nperception functionality will be supported in subsequent iterations."),(0,i.yg)("p",null,"Setting ",(0,i.yg)("inlineCode",{parentName:"p"},"grace_period")," to 10 means allowing a 10-second delay between the data in the materialized view and\nthe data in the base tables. If there is a delay of up to 10 seconds between the data in the materialized\nview and the data in the base tables, the materialized view can still be used for transparent rewriting within\nthat time frame."),(0,i.yg)("p",null,"For internal tables in the materialized view, you can control the maximum delay allowed for the data used by\nthe transparent rewriting by setting the ",(0,i.yg)("inlineCode",{parentName:"p"},"grace_period")," property.\nRefer to ",(0,i.yg)("a",{parentName:"p",href:"/docs/dev/sql-manual/sql-statements/Data-Definition-Statements/Create/CREATE-ASYNC-MATERIALIZED-VIEW"},"CREATE-ASYNC-MATERIALIZED-VIEW")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Viewing and Debugging Transparent Rewrite Hit Information")),(0,i.yg)("p",null,"You can use the following statements to view the hit information of transparent rewriting for a materialized view.\nIt will display a concise overview of the transparent rewriting process."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"explain <query_sql>")," The information returned is as follows, with the relevant information pertaining to materialized views extracted:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"| MaterializedView                                                                                                                                                                                                                                      |\n| MaterializedViewRewriteSuccessAndChose:                                                                                                                                                                                                               |\n|   Names: mv5                                                                                                                                                                                                                                          |\n| MaterializedViewRewriteSuccessButNotChose:                                                                                                                                                                                                            |\n|                                                                                                                                                                                                                                                       |\n| MaterializedViewRewriteFail:                                                                                                                                                                                                                          |\n|   Name: mv4                                                                                                                                                                                                                                           |\n|   FailSummary: Match mode is invalid, View struct info is invalid                                                                                                                                                                                     |\n|   Name: mv3                                                                                                                                                                                                                                           |\n|   FailSummary: Match mode is invalid, Rewrite compensate predicate by view fail, View struct info is invalid                                                                                                                                          |\n|   Name: mv1                                                                                                                                                                                                                                           |\n|   FailSummary: The columns used by query are not in view, View struct info is invalid                                                                                                                                                                 |\n|   Name: mv2                                                                                                                                                                                                                                           |\n|   FailSummary: The columns used by query are not in view, View struct info is invalid\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"MaterializedViewRewriteSuccessAndChose"),": Transparent rewrite succeeded, and the materialized view names list\nchosen by the CBO."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"MaterializedViewRewriteSuccessButNotChose"),": Transparent rewrite succeeded, but the final CBO did not choose the\nmaterialized view names list."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"MaterializedViewRewriteFail"),": Lists transparent rewrite failures and summarizes the reasons."),(0,i.yg)("p",null,"If you want to know the detailed information about materialized view candidates, rewriting, and the final selection process,\nyou can execute the following statement. It will provide a detailed breakdown of the transparent rewriting process."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"explain memo plan <query_sql>")),(0,i.yg)("h2",{id:"relevant-environment-variables"},"Relevant Environment Variables"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Switch"),(0,i.yg)("th",{parentName:"tr",align:null},"Description"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"SET enable_nereids_planner = true;"),(0,i.yg)("td",{parentName:"tr",align:null},"Asynchronous materialized views are only supported under the new optimizer, so the new optimizer needs to be enabled.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"SET enable_materialized_view_rewrite = true;"),(0,i.yg)("td",{parentName:"tr",align:null},"Enable or disable query transparent rewriting, default is disabled")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"SET materialized_view_rewrite_enable_contain_external_table = true;"),(0,i.yg)("td",{parentName:"tr",align:null},"Whether materialized views participating in transparent rewriting are allowed to contain external tables, default is not allowed")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"SET materialized_view_rewrite_success_candidate_num = 3;"),(0,i.yg)("td",{parentName:"tr",align:null},"Transparently rewrites the successful result set, allowing the maximum number of CBO candidates to participate, the default is 3")))),(0,i.yg)("h2",{id:"limitations"},"Limitations"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"The materialized view definition statement only allows SELECT, FROM, WHERE, JOIN, and GROUP BY clauses.\nThe input for JOIN can include simple GROUP BY (aggregation on a single table).\nSupported types of JOIN operations include INNER and LEFT OUTER JOIN.\nSupport for other types of JOIN operations will be gradually added.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Materialized views based on External Tables do not guarantee strong consistency in query results.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"The use of non-deterministic functions to build materialized views is not supported,\nincluding rand, now, current_time, current_date, random, uuid, etc.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Transparent rewriting does not support window functions.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"There is LIMIT in queries and materialized views, and transparent rewriting is not supported for the time being.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Currently, materialized view definitions cannot utilize views or other materialized views.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"When the query or materialized view has no data, transparent rewriting is not supported.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Currently, WHERE clause compensation supports scenarios where the materialized view does not have a WHERE clause,\nbut the query does, or where the materialized view has a WHERE clause and the query's WHERE clause is a superset\nof the materialized view's. Range condition compensation is not yet supported but will be added gradually."))))}y.isMDXComponent=!0}}]);